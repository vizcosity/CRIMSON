/**
 * ExpressJS App skeleton, based off of express-generator.
 * Ref: https://expressjs.com/en/starter/generator.html
 *
 * This app skeleton is based off of the generator provided above, and deploys
 * the code geneerated through CRIMSON via a server environment, allowing users
 * to quickly bootstrap new development projects, and support prototyping of
 * server-side features such as user login and registration.
 *
 * @ Aaron Baw 2019
 */

<%#
  Params passable to this template;
    - port (Static port)
    - projectName (Name for project)
    - secret (Session secret)
%>

const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const ipv4 = require('local-ipv4-address');
<% if (locals.generateAuthRoutes) { %>
const db = require(path.join(__dirname, 'db/db.js'));
const passport = require('passport');
var Strategy = require('passport-local').Strategy;
<% } %>

// LIVE_PREVIEW_MDOE is an ENV variable set by CRIMSON in order to launch the
// server and preview the generated wireframe in-app.
// Replace with the commented line below to remove this for production.
const _PORT = process.env.LIVE_PREVIEW_MODE ? <%- port %> : (process.env.PORT || <%- port %>)
// const _PORT = process.env.PORT || 3000;

<% if (locals.generateAuthRoutes) { %>
// Define local authentication strategy.
passport.serializeUser(function(user, cb) {
  cb(null, user.username);
});

passport.deserializeUser(async function(username, cb) {
  cb(null, await db.getUserByUsername(username));
});

passport.use(new Strategy(async (username, password, cb) => {
    console.log(`Attempting to authenticate:`, username, password);
    var result = await db.validateUserPassword(username, password)
    return cb(null, result ? await db.getUserByUsername(username) : false);
}));
<% } %>
// Initialize routes with DB & Passport instance.
const indexRouter = require(path.join(__dirname, 'routes/index'))();
<%# Only initialise login, registration & logout routes if it has been specified
    in template params.
%>
<% if (locals.generateAuthRoutes) { %>
const loginRouter = require(path.join(__dirname,'routes/login'))({db, passport});
const registrationRouter = require(path.join(__dirname, 'routes/register'))({db, passport});
const logoutRouter = require(path.join(__dirname, 'routes/logout'))({db, passport});
<% } %>

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
  secret: '<%- locals.secret ? secret : 'my secret' %>',
  resave: null,
  saveUninitialized: null
}));
<% if (locals.generateAuthRoutes) { %>
app.use(passport.initialize());
app.use(passport.session());
<% } %>
app.use('/public', express.static(path.join(__dirname, 'public')));

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.set('port', _PORT);

app.use('/', indexRouter);
<% if (locals.generateAuthRoutes) { %>
app.use('/login', loginRouter);
app.use('/logout', logoutRouter);
app.use('/register', registrationRouter);
<% } %>

/**
 * Start Express server.
 * If we launch the file from the command-line, then run the server. If the file
 * is imported as a module, we want to export the 'app' object so that we can
 * call the 'listen' method directly.
 */
if (require.main == module)
  app.listen(app.get('port'), async () => {
    var host = `http://${await ipv4()}:${app.get('port')}`
    console.log('drawn_jumbotron_sample_2 is running at %s in %s mode', host, app.get('env'));
    console.log('  Press CTRL-C to stop\n');
  });
else module.exports = app;
