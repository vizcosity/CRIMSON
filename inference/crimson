#!/usr/bin/env node


/**
 * Inference pipeline CLI wrapper.
 *
 *  @ Aaron Baw 2018
 */

const args = require('commander');
const { bundle } = require('./modules/bundle/bundle');
const package = require('./package.json');
const detectPrimitives = require('./modules/detectPrimitives');
const { generateCode, generateACR } = require('./modules/generateCode');
const { filterPrimitives } = require('./modules/filterPrimitives');
const { getLastACRObjectId } = require('./modules/geometry');
const { inferGrid } = require('./modules/inference/inferGrid');
const { inferCompoundPrimitives } = require('./modules/inference/inferCompound');
const fs = require('fs');
const { resolve, basename, join } = require('path');
const mkdir = require('mkdirp');
const { exec, spawn } = require('child_process');

// Parse arguments.
args
  .version(package.version)
  .usage("--image <image path> --output [output directory] [--context , --project]")
  .option('-i, --image <image path>', 'Source image.')
  .option('-o, --output [output path]', 'Output directory.', './.output')
  .option('-c, --context [vanilla, bootstrap, react]', 'Context type ("vanilla", "bootstrap", "react")', 'vanilla')
  .option('-p, --project [static, server]', 'Output type ("static", "server")', 'server')
  .parse(process.argv)

if (!args.image) return args.help();
var imagePath = args.image;
imagePath = resolve(__dirname, imagePath);
const file = imagePath.split('/')[imagePath.split('/').length - 1]
const fileName = file.split('.')[0].substring(0, file.split('.')[0].length);
const outputDir = resolve(__dirname, args.output, fileName);

// Set the project type as an environment variable.
process.env['CRIMSON_PROJECT_TYPE'] = args.project;

// Create output directory.
mkdir.sync(outputDir);

// Generate the ACR JSON file, and return the path of the generated file.
// Any changes made by the user will be made to this file using the interactive
// platform.
detectPrimitives(imagePath).then(async primitives => {

  log(`Generating ACR for`, fileName);
  var ACR = generateACR(primitives);

  var outputFilePath = resolve(outputDir,'acr.json')
  fs.writeFileSync(outputFilePath, JSON.stringify(ACR, null, 2));

  log(`Generated ACR.`);

  // Return the path of the ACR file generated.
  return outputFilePath;

}).then(async acrFilePath => {

  log(`Loading ACR file for`, fileName);

  // Load primitives from ACR file.
  var primitives = JSON.parse(fs.readFileSync(acrFilePath));

  log(`Loaded.`);


  // Infer compound primities as an extra step here. This is separated from the
  // main ACR generation flow so that inference can take place after genration
  // with regards to modification and viewing on the web platform.
  primitives = inferCompoundPrimitives(primitives);

  log(`Filtering unused primitives.`);

  // Filter leftover primitives which have been used for inference but should not
  // be embedded as code.
  primitives = filterPrimitives(primitives);

  log(`Inferring grids for primitives.`);
  primitives = inferGrid(primitives, getLastACRObjectId(primitives));

  log(`Generating code for`, fileName);

  var code = await generateCode(primitives);

  log(`Generated Code.`);
  log(`Bundling project and saving output to`, outputDir);

  await bundle({
    outputDir,
    args,
    package,
    projectType: args.project,
    context: args.context,
    filteredACR: primitives,
    imagePath,
    code,
    file,
    fileName,
    generateAuth: process.env.CRIMSON_GENERATE_AUTH
  });


  // Deploy express server if we have specified the projectType is 'server'.
  if (args.project === 'server'){
    var app = require(join(outputDir, 'app.js'));
    app.listen(app.get('port'), () => log(fileName, `is running on`, `http://localhost:${app.get('port')}`));
  }

})

.catch(console.err);


// Logging.
function log(...msg){
  if (process.env.DEBUG) console.log(basename(__filename.split('.')[0]).toUpperCase(), '|', ...msg);
}
